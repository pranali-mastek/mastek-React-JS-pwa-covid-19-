{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","responseArr","console","log","data","catch","err","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","height","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","color","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46037fe4.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n// import CardColumns from 'react-bootstrap/CardColumns';\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form';\n\nfunction App() {\n\nconst [latest, setLatest] = useState([]);\nconst [results, setResults] = useState([]);\nconst[searchCountry, setSearchCountry] = useState(\"\");\n\nuseEffect(() => {\n  axios\n  .all([\n    axios.get(\"https://corona.lmao.ninja/v2/all\"),\n    axios.get(\"https://corona.lmao.ninja/v2/countries\")\n  ])\n  \n  .then(responseArr => {\n    console.log(responseArr[0].data);\n    console.log(responseArr[1].data);\n    setLatest(responseArr[0].data);\n    setResults(responseArr[1].data);\n  })\n  .catch(err => {\n    console.log(err);\n  });\n}, []);\n\nconst date = new Date(parseInt(latest.updated));\nconst lastUpdated = date.toString();\n\nconst filterCountry = results.filter(item => {\n  return searchCountry !== \"\" ? item.country.toLowerCase().includes(searchCountry) : item;\n})\n\n\nconst countries = filterCountry.map((data ,i)=> {\n  return(\n    <Card\n    key={i} \n    bg = \"light\"\n    text= \"dark\"\n    className = \"text-center\"\n    style = {{margin : \"10px\"}}\n    >\n<Card.Img variant=\"top\" src={data.countryInfo.flag} style = {{height:\"200px\"}} ></Card.Img>\n<Card.Body>\n  <Card.Title>{data.country}</Card.Title>\n  <Card.Text>Cases {data.cases}</Card.Text>\n  <Card.Text>Deaths {data.deaths}</Card.Text>\n  <Card.Text>Recovered {data.recovered}</Card.Text>\n  <Card.Text>Today's cases {data.todayCases}</Card.Text>\n  <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n  <Card.Text>Active {data.active}</Card.Text>\n  <Card.Text>Critical {data.critical}</Card.Text>\n</Card.Body>\n    </Card>\n  )\n})\n\n\nvar queries = [{\n  columns: 2,\n  query: 'min-width: 500px'\n}, {\n  columns: 3,\n  query: 'min-width: 1000px'\n}];\n\n  return (\n    <div>\n      <br />\n      <h2 style={{textAlign: \"center\", color: \"white\" }}>Covid-19 Live Status </h2>\n      <br/>\n     <CardDeck style = {{margin : \"10px\"}}>\n  <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    {/* <Card.Img variant=\"top\" src=\"holder.js/100px160\" /> */}\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n       {latest.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n  <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card  bg=\"danger\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    {/* <Card.Img variant=\"top\" src=\"holder.js/100px160\" /> */}\n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card  bg=\"success\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    {/* <Card.Img variant=\"top\" src=\"holder.js/100px160\" /> */}\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n      {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<br/>\n<Form style = {{margin : \"10px\"}}>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control type=\"email\" placeholder=\"Search Country\" onChange={e => setSearchCountry(e.target.value)}/>\n  </Form.Group>\n \n</Form>\n\n<Columns queries={queries}>{countries}</Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}